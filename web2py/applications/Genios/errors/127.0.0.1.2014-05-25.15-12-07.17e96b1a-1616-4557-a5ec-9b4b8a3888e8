(dp1
S'output'
p2
S'<class \'gluon.contrib.pymysql.err.InternalError\'> (1050, u"Table \'tb_perfil\' already exists")'
p3
sS'layer'
p4
S'C:\\Users\\Leandro\\Documents\\CJR\\DIPRO\\PROJETOS\\G\xeanios\\genios\\ProjetoGenios\\web2py\\applications\\Genios\\views\\appadmin.html'
p5
sS'code'
p6
S'response.write(\'<!--[if HTML5]><![endif]-->\\r\\n<!DOCTYPE html>\\r\\n<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->\\r\\n<!--[if lt IE 7]><html class="ie ie6 ie-lte9 ie-lte8 ie-lte7 no-js" lang="\', escape=False)\nresponse.write(T.accepted_language or \'en\')\nresponse.write(\'"> <![endif]-->\\r\\n<!--[if IE 7]><html class="ie ie7 ie-lte9 ie-lte8 ie-lte7 no-js" lang="\', escape=False)\nresponse.write(T.accepted_language or \'en\')\nresponse.write(\'"> <![endif]-->\\r\\n<!--[if IE 8]><html class="ie ie8 ie-lte9 ie-lte8 no-js" lang="\', escape=False)\nresponse.write(T.accepted_language or \'en\')\nresponse.write(\'"> <![endif]-->\\r\\n<!--[if IE 9]><html class="ie9 ie-lte9 no-js" lang="\', escape=False)\nresponse.write(T.accepted_language or \'en\')\nresponse.write(\'"> <![endif]-->\\r\\n<!--[if (gt IE 9)|!(IE)]><!--> <html class="no-js" lang="\', escape=False)\nresponse.write(T.accepted_language or \'en\')\nresponse.write(\'"> <!--<![endif]-->\\r\\n<head>\\r\\n<title>\', escape=False)\nresponse.write(response.title or request.application)\nresponse.write(\'</title>\\r\\n  <!--[if !HTML5]>\\r\\n      <meta http-equiv="X-UA-Compatible" content="IE=edge\', escape=False)\nresponse.write(not request.is_local and \',chrome=1\' or \'\')\nresponse.write(\'">\\r\\n  <![endif]-->\\r\\n  <!-- www.phpied.com/conditional-comments-block-downloads/ -->\\r\\n  <!-- Always force latest IE rendering engine\\r\\n       (even in intranet) & Chrome Frame\\r\\n       Remove this if you use the .htaccess -->\\r\\n\\t   \\r\\n  <meta charset="utf-8" />\\r\\n\\r\\n  <!-- http://dev.w3.org/html5/markup/meta.name.html -->\\r\\n  <meta name="application-name" content="\', escape=False)\nresponse.write(request.application)\nresponse.write(\'" />\\r\\n\\r\\n  <!-- Speaking of Google, don\\\'t forget to set your site up:\\r\\n       http://google.com/webmasters -->\\r\\n  <meta name="google-site-verification" content="" />\\r\\n\\r\\n  <!--  Mobile Viewport Fix\\r\\n        j.mp/mobileviewport & davidbcalhoun.com/2010/viewport-metatag\\r\\n        device-width: Occupy full width of the screen in its current orientation\\r\\n        initial-scale = 1.0 retains dimensions instead of zooming out if page height > device height\\r\\n        user-scalable = yes allows the user to zoom in -->\\r\\n  <meta name="viewport" content="width=device-width, initial-scale=1.0" />\\r\\n\\r\\n  <link rel="shortcut icon" href="\', escape=False)\nresponse.write(URL(\'static\',\'images/favicon.ico\'))\nresponse.write(\'" type="image/x-icon">\\r\\n  <link rel="apple-touch-icon" href="\', escape=False)\nresponse.write(URL(\'static\',\'images/favicon.png\'))\nresponse.write(\'">\\r\\n\\r\\n  <!-- All JavaScript at the bottom, except for Modernizr which enables\\r\\n       HTML5 elements & feature detects -->\\r\\n  <script src="\', escape=False)\nresponse.write(URL(\'static\',\'js/modernizr.custom.js\'))\nresponse.write(\'"></script>\\r\\n\\r\\n  <!-- include stylesheets -->\\r\\n  \', escape=False)\nresponse.files.insert(0,URL(\'static\',\'css/web2py.css\'))\nresponse.files.insert(1,URL(\'static\',\'css/bootstrap.min.css\'))\nresponse.files.insert(2,URL(\'static\',\'css/bootstrap-responsive.min.css\'))\nresponse.files.insert(3,URL(\'static\',\'css/web2py_bootstrap.css\'))\nresponse.write(\'\\r\\n\\r\\n  \', escape=False)\nresponse.write(\'<script type="text/javascript"><!--\\r\\n    // These variables are used by the web2py_ajax_init function in web2py_ajax.js (which is loaded below).\\r\\n    var w2p_ajax_confirm_message = "\', escape=False)\nresponse.write(T(\'Are you sure you want to delete this object?\'))\nresponse.write(\'";\\r\\n    var w2p_ajax_disable_with_message = "\', escape=False)\nresponse.write(T(\'Working...\'))\nresponse.write(\'";\\r\\n    var w2p_ajax_date_format = "\', escape=False)\nresponse.write(T(\'%Y-%m-%d\'))\nresponse.write(\'";\\r\\n    var w2p_ajax_datetime_format = "\', escape=False)\nresponse.write(T(\'%Y-%m-%d %H:%M:%S\'))\nresponse.write(\'";\\r\\n    var ajax_error_500 = \\\'\', escape=False)\nresponse.write(T.M(\'An error occured, please [[reload %s]] the page\') % URL(args=request.args, vars=request.get_vars))\nresponse.write("\'\\r\\n    //--></script>\\r\\n", escape=False)\nresponse.files.insert(0,URL(\'static\',\'js/jquery.js\'))\nresponse.files.insert(1,URL(\'static\',\'css/calendar.css\'))\nresponse.files.insert(2,URL(\'static\',\'js/calendar.js\'))\nresponse.files.insert(3,URL(\'static\',\'js/web2py.js\'))\nresponse.include_meta()\nresponse.include_files()\nresponse.write(\'\\r\\n\', escape=False)\nresponse.write(\'\\r\\n\\r\\n  \', escape=False)\n# using sidebars need to know what sidebar you want to use\nleft_sidebar_enabled = globals().get(\'left_sidebar_enabled\',False)\nright_sidebar_enabled = globals().get(\'right_sidebar_enabled\',False)\nmiddle_columns = {0:\'span12\',1:\'span9\',2:\'span6\'}[\n(left_sidebar_enabled and 1 or 0)+(right_sidebar_enabled and 1 or 0)]\nresponse.write(\'\\r\\n\\r\\n  <!-- uncomment here to load jquery-ui\\r\\n       <link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/themes/ui-lightness/jquery-ui.css" type="text/css" media="all" />\\r\\n       <script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js" type="text/javascript"></script>\\r\\n       uncomment to load jquery-ui //-->\\r\\n  <noscript><link href="\', escape=False)\nresponse.write(URL(\'static\', \'css/web2py_bootstrap_nojs.css\'))\nresponse.write(\'" rel="stylesheet" type="text/css" /></noscript>\\r\\n  \', escape=False)\nresponse.write(\'\\r\\n</head>\\r\\n\\r\\n<body>\\r\\n  <!-- Navbar ================================================== -->\\r\\n  <div class="navbar navbar-inverse">\\r\\n    <div class="flash">\', escape=False)\nresponse.write(response.flash or \'\')\nresponse.write(\'</div>\\r\\n    <div class="navbar-inner">\\r\\n      <div class="container">\\r\\n        \', escape=False)\nis_mobile=request.user_agent().is_mobile\nresponse.write(\'\\r\\n        <!-- the next tag is necessary for bootstrap menus, do not remove -->\\r\\n        <button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse" style="\', escape=False)\nresponse.write(\'display:none;\' if not is_mobile else \'\')\nresponse.write(\'">\\r\\n          <span class="icon-bar"></span>\\r\\n          <span class="icon-bar"></span>\\r\\n          <span class="icon-bar"></span>\\r\\n        </button>\\r\\n        \', escape=False)\nresponse.write(response.logo or \'\')\nresponse.write(\'\\r\\n        <ul id="navbar" class="nav pull-right">\', escape=False)\nresponse.write(\'auth\' in globals() and auth.navbar(mode="dropdown") or \'\')\nresponse.write(\'</ul>\\r\\n        <div class="\', escape=False)\nresponse.write(\'nav-collapse\' if is_mobile else \'nav\')\nresponse.write(\'">\\r\\n          \', escape=False)\nif response.menu:\n    response.write(\'\\r\\n          \', escape=False)\n    response.write(MENU(response.menu, _class=\'mobile-menu nav\' if is_mobile else \'nav\',mobile=is_mobile,li_class=\'dropdown\',ul_class=\'dropdown-menu\'))\n    response.write(\'\\r\\n          \', escape=False)\n    pass\nresponse.write(\'\\r\\n        </div><!--/.nav-collapse -->\\r\\n      </div>\\r\\n    </div>\\r\\n  </div><!--/top navbar -->\\r\\n\\r\\n  <div class="container">\\r\\n    <!-- Masthead ================================================== -->\\r\\n    <header class="mastheader row" id="header">\\r\\n      \', escape=False)\nif response.title:\n    response.write(\'\\r\\n        <div class="span12">\\r\\n            <div class="page-header">\\r\\n                <h1>\\r\\n                    \', escape=False)\n    response.write(response.title)\n    response.write(\'\\r\\n                    <small>\', escape=False)\n    response.write(response.subtitle or \'\')\n    response.write(\'</small>\\r\\n                </h1>\\r\\n            </div>\\r\\n        </div>\\r\\n\\t\', escape=False)\n    pass\nresponse.write(\'\\r\\n    </header>\\r\\n\\r\\n    <section id="main" class="main row">\\r\\n        \', escape=False)\nif left_sidebar_enabled:\n    response.write(\'\\r\\n        <div class="span3 left-sidebar">\\r\\n            \', escape=False)\n    response.write(\'\\r\\n            <h3>Left Sidebar</h3>\\r\\n            <p></p>\\r\\n            \', escape=False)\n    response.write(\'\\r\\n        </div>\\r\\n        \', escape=False)\n    pass\nresponse.write(\'\\r\\n\\r\\n        <div class="\', escape=False)\nresponse.write(middle_columns)\nresponse.write(\'">\\r\\n            \', escape=False)\nresponse.write(\'\\r\\n            \', escape=False)\nresponse.write(\'\\r\\n<script><!--\\r\\n    jQuery(document).ready(function(){\\r\\n    jQuery("table.sortable tbody tr").mouseover( function() {\\r\\n    jQuery(this).addClass("highlight"); }).mouseout( function() {\\r\\n    jQuery(this).removeClass("highlight"); });\\r\\n    jQuery(\\\'table.sortable tbody tr:odd\\\').addClass(\\\'odd\\\');\\r\\n    jQuery(\\\'table.sortable tbody tr:even\\\').addClass(\\\'even\\\');\\r\\n});\\r\\n//--></script>\\r\\n\\r\\n\', escape=False)\nif request.function==\'index\':\n    response.write(\'\\r\\n<h2>\', escape=False)\n    response.write(T("Available Databases and Tables"))\n    response.write(\'</h2>\\r\\n  \', escape=False)\n    if not databases:\n        response.write(T("No databases in this application"))\n        pass\n    response.write(\'\\r\\n<table>\\r\\n  \', escape=False)\n    for db in sorted(databases):\n        response.write(\'\\r\\n    \', escape=False)\n        for table in databases[db].tables:\n            response.write(\'\\r\\n      \', escape=False)\n            qry=\'%s.%s.id>0\'%(db,table)\n            response.write(\'\\r\\n      \', escape=False)\n            tbl=databases[db][table]\n            response.write(\'\\r\\n      \', escape=False)\n            if hasattr(tbl,\'_primarykey\'):\n                response.write(\'\\r\\n        \', escape=False)\n                if tbl._primarykey:\n                    response.write(\'\\r\\n            \', escape=False)\n                    firstkey=tbl[tbl._primarykey[0]]\n                    response.write(\'\\r\\n            \', escape=False)\n                    if firstkey.type in [\'string\',\'text\']:\n                        response.write(\'\\r\\n              \', escape=False)\n                        qry=\'%s.%s.%s!=""\'%(db,table,firstkey.name)\n                        response.write(\'\\r\\n            \', escape=False)\n                    else:\n                        response.write(\'\\r\\n              \', escape=False)\n                        qry=\'%s.%s.%s>0\'%(db,table,firstkey.name)\n                        response.write(\'\\r\\n            \', escape=False)\n                        pass\n                    response.write(\'\\r\\n        \', escape=False)\n                else:\n                    response.write(\'\\r\\n             \', escape=False)\n                    qry=\'\'\n                    response.write(\'\\r\\n        \', escape=False)\n                    pass\n                response.write(\'\\r\\n      \', escape=False)\n                pass\n            response.write(\'\\r\\n  <tr>\\r\\n    <th style="font-size: 1.75em;">\\r\\n      \', escape=False)\n            response.write(A("%s.%s" % (db,table),_href=URL(\'select\',args=[db],vars=dict(query=qry))))\n            response.write(\'\\r\\n    </th>\\r\\n    <td>\\r\\n      \', escape=False)\n            response.write(A(str(T(\'New Record\')),_href=URL(\'insert\',args=[db,table]),_class="btn"))\n            response.write(\'\\r\\n    </td>\\r\\n  </tr>\\r\\n  \', escape=False)\n            pass\n        response.write(\'\\r\\n  \', escape=False)\n        pass\n    response.write(\'\\r\\n</table>\\r\\n\\r\\n\', escape=False)\nelif request.function==\'select\':\n    response.write(\'\\r\\n  <h2>\', escape=False)\n    response.write(XML(str(T("Database %s select"))%A(request.args[0],_href=URL(\'index\'))))\n    response.write(\'\\r\\n  </h2>\\r\\n  \', escape=False)\n    if tb:\n        response.write(\'\\r\\n  <h3>\', escape=False)\n        response.write(T(\'Traceback\'))\n        response.write(\'</h3>\\r\\n  <pre>\\r\\n    \', escape=False)\n        response.write(tb)\n        response.write(\'\\r\\n  </pre>\\r\\n  \', escape=False)\n        pass\n    response.write(\'\\r\\n  \', escape=False)\n    if table:\n        response.write(\'\\r\\n  \', escape=False)\n        response.write(A(str(T(\'New Record\')),_href=URL(\'insert\',args=[request.args[0],table]),_class="btn"))\n        response.write(\'<br/><br/>\\r\\n    <h3>\', escape=False)\n        response.write(T("Rows in Table"))\n        response.write(\'</h3><br/>\\r\\n   \', escape=False)\n    else:\n        response.write(\'\\r\\n    <h3>\', escape=False)\n        response.write(T("Rows selected"))\n        response.write(\'</h3><br/>\\r\\n   \', escape=False)\n        pass\n    response.write(\'\\r\\n   \', escape=False)\n    response.write(form)\n    response.write(\'\\r\\n   <p>\', escape=False)\n    response.write(T(\'The "query" is a condition like "db.table1.field1==\\\'value\\\'". Something like "db.table1.field1==db.table2.field2" results in a SQL JOIN.\'))\n    response.write(\'<br/>\\r\\n      \', escape=False)\n    response.write(T(\'Use (...)&(...) for AND, (...)|(...) for OR, and ~(...)  for NOT to build more complex queries.\'))\n    response.write(\'<br/>\\r\\n      \', escape=False)\n    response.write(T(\'"update" is an optional expression like "field1=\\\'newvalue\\\'". You cannot update or delete the results of a JOIN\'))\n    response.write(\'</p>\\r\\n    <br/><br/>\\r\\n    <h4>\', escape=False)\n    response.write(T("%s selected", nrows))\n    response.write(\'</h4>\\r\\n    \', escape=False)\n    if start>0:\n        response.write(A(T(\'previous %s rows\') % step,_href=URL(\'select\',args=request.args[0],vars=dict(start=start-step)),_class="btn"))\n        pass\n    response.write(\'\\r\\n    \', escape=False)\n    if stop<nrows:\n        response.write(A(T(\'next %s rows\') % step,_href=URL(\'select\',args=request.args[0],vars=dict(start=start+step)),_class="btn"))\n        pass\n    response.write(\'\\r\\n    \', escape=False)\n    if rows:\n        response.write(\'\\r\\n       <div style="overflow: auto;" width="80%">\\r\\n       \', escape=False)\n        linkto = lambda f, t, r: URL(\'update\', args=[request.args[0], r, f]) if f else "#"\n        response.write(\'\\r\\n       \', escape=False)\n        upload=URL(\'download\',args=request.args[0])\n        response.write(\'\\r\\n       \', escape=False)\n        response.write(SQLTABLE(rows,linkto,upload,orderby=True,_class=\'sortable\'))\n        response.write(\'\\r\\n       </div>\\r\\n    \', escape=False)\n        pass\n    response.write(\'\\r\\n    <br/><br/><h3>\', escape=False)\n    response.write(T("Import/Export"))\n    response.write(\'</h3><br/>\\r\\n    <a href="\', escape=False)\n    response.write(URL(\'csv\',args=request.args[0],vars=dict(query=query)))\n    response.write(\'" class="btn">\', escape=False)\n    response.write(T("export as csv file"))\n    response.write(\'</a>\\r\\n  \', escape=False)\n    response.write(formcsv or \'\')\n    response.write(\'\\r\\n\\r\\n\', escape=False)\nelif request.function==\'insert\':\n    response.write(\'\\r\\n  <h2>\', escape=False)\n    response.write(T("Database"))\n    response.write(\' \', escape=False)\n    response.write(A(request.args[0],_href=URL(\'index\')))\n    response.write(\'\\r\\n    \', escape=False)\n    if hasattr(table,\'_primarykey\'):\n        response.write(\'\\r\\n      \', escape=False)\n        fieldname=table._primarykey[0]\n        response.write(\'\\r\\n      \', escape=False)\n        dbname=request.args[0]\n        response.write(\'\\r\\n      \', escape=False)\n        tablename=request.args[1]\n        response.write(\'\\r\\n      \', escape=False)\n        cond = table[fieldname].type in [\'string\',\'text\'] and \'!=""\' or \'>0\'\n        response.write(\'\\r\\n      \', escape=False)\n        response.write(T("Table"))\n        response.write(\' \', escape=False)\n        response.write(A(tablename,_href=URL(\'select\',args=dbname,vars=dict(query=\'%s.%s.%s%s\'%(dbname,tablename,fieldname,cond)))))\n        response.write(\'\\r\\n    \', escape=False)\n    else:\n        response.write(\'\\r\\n      \', escape=False)\n        response.write(T("Table"))\n        response.write(\' \', escape=False)\n        response.write(A(request.args[1],_href=URL(\'select\',args=request.args[0],vars=dict(query=\'%s.%s.id>0\'%tuple(request.args[:2])))))\n        response.write(\'\\r\\n    \', escape=False)\n        pass\n    response.write(\'\\r\\n  </h2>\\r\\n  <h3>\', escape=False)\n    response.write(T("New Record"))\n    response.write(\'</h3><br/>\\r\\n  \', escape=False)\n    response.write(form)\n    response.write(\'\\r\\n\', escape=False)\nelif request.function==\'update\':\n    response.write(\'\\r\\n  <h2>\', escape=False)\n    response.write(T("Database"))\n    response.write(\' \', escape=False)\n    response.write(A(request.args[0],_href=URL(\'index\')))\n    response.write(\'\\r\\n    \', escape=False)\n    if hasattr(table,\'_primarykey\'):\n        response.write(\'\\r\\n      \', escape=False)\n        fieldname=request.vars.keys()[0]\n        response.write(\'\\r\\n      \', escape=False)\n        dbname=request.args[0]\n        response.write(\'\\r\\n      \', escape=False)\n        tablename=request.args[1]\n        response.write(\'\\r\\n      \', escape=False)\n        cond = table[fieldname].type in [\'string\',\'text\'] and \'!=""\' or \'>0\'\n        response.write(\'\\r\\n      \', escape=False)\n        response.write(T("Table"))\n        response.write(\' \', escape=False)\n        response.write(A(tablename,_href=URL(\'select\',args=dbname,vars=dict(query=\'%s.%s.%s%s\'%(dbname,tablename,fieldname,cond)))))\n        response.write(\'\\r\\n      \', escape=False)\n        response.write(T("Record"))\n        response.write(\' \', escape=False)\n        response.write(A(\'%s=%s\'%request.vars.items()[0],_href=URL(\'update\',args=request.args[:2],vars=request.vars)))\n        response.write(\'\\r\\n    \', escape=False)\n    else:\n        response.write(\'\\r\\n      \', escape=False)\n        response.write(T("Table"))\n        response.write(\' \', escape=False)\n        response.write(A(request.args[1],_href=URL(\'select\',args=request.args[0],vars=dict(query=\'%s.%s.id>0\'%tuple(request.args[:2])))))\n        response.write(\'\\r\\n      \', escape=False)\n        response.write(T("Record id"))\n        response.write(\' \', escape=False)\n        response.write(A(request.args[2],_href=URL(\'update\',args=request.args[:3])))\n        response.write(\'\\r\\n    \', escape=False)\n        pass\n    response.write(\'\\r\\n  </h2>\\r\\n  <h3>\', escape=False)\n    response.write(T("Edit current record"))\n    response.write(\'</h3><br/><br/>\', escape=False)\n    response.write(form)\n    response.write(\'\\r\\n\\r\\n\', escape=False)\nelif request.function==\'state\':\n    response.write(\'\\r\\n  <h2>\', escape=False)\n    response.write(T("Internal State"))\n    response.write(\'</h2>\\r\\n  <h3>\', escape=False)\n    response.write(T("Current request"))\n    response.write(\'</h3>\\r\\n  \', escape=False)\n    response.write(BEAUTIFY(request))\n    response.write(\'\\r\\n  <br/><h3>\', escape=False)\n    response.write(T("Current response"))\n    response.write(\'</h3>\\r\\n  \', escape=False)\n    response.write(BEAUTIFY(response))\n    response.write(\'\\r\\n  <br/><h3>\', escape=False)\n    response.write(T("Current session"))\n    response.write(\'</h3>\\r\\n  \', escape=False)\n    response.write(BEAUTIFY(session))\n    response.write(\'\\r\\n\\r\\n\\r\\n\', escape=False)\nelif request.function == \'ccache\':\n    response.write(\'\\r\\n<h2>\', escape=False)\n    T("Cache")\n    response.write(\'</h2>\\r\\n<div class="list">\\r\\n\\r\\n  <div class="list-header">\\r\\n    <h3>\', escape=False)\n    T("Statistics")\n    response.write(\'</h3>\\r\\n  </div>\\r\\n\\r\\n  <div class="content">\\r\\n    <h4>\', escape=False)\n    response.write(T("Overview"))\n    response.write(\'</h4>\\r\\n    <p>\', escape=False)\n    response.write(T.M("Number of entries: **%s**", total[\'entries\']))\n    response.write(\'</p>\\r\\n    \', escape=False)\n    if total[\'entries\'] > 0:\n        response.write(\'\\r\\n      <p>\', escape=False)\n        response.write(T.M("Hit Ratio: **%(ratio)s%%** (**%(hits)s** %%{hit(hits)} and **%(misses)s** %%{miss(misses})",\n        dict(ratio=total[\'ratio\'], hits=total[\'hits\'], misses=total[\'misses\'])))\n        response.write(\'\\r\\n     </p>\\r\\n    <p>\\r\\n      \', escape=False)\n        response.write(T("Size of cache:"))\n        response.write(\'\\r\\n      \', escape=False)\n        if object_stats:\n            response.write(\'\\r\\n        \', escape=False)\n            response.write(T.M("**%(items)s** %%{item(items)}, **%(bytes)s** %%{byte(bytes)}", dict(items=total[\'objects\'], bytes=total[\'bytes\'])))\n            response.write(\'\\r\\n        \', escape=False)\n            if total[\'bytes\'] > 524287:\n                response.write(\'\\r\\n          \', escape=False)\n                response.write(T.M("(**%.0d MB**)", total[\'bytes\'] / 1048576))\n                response.write(\'\\r\\n        \', escape=False)\n                pass\n            response.write(\'\\r\\n      \', escape=False)\n        else:\n            response.write(\'\\r\\n        \', escape=False)\n            response.write(T.M("**not available** (requires the Python [[guppy http://pypi.python.org/pypi/guppy/ popup]] library)"))\n            response.write(\'\\r\\n      \', escape=False)\n            pass\n        response.write(\'\\r\\n    </p>\\r\\n    <p>\\r\\n      \', escape=False)\n        response.write(T.M("Cache contains items up to **%(hours)02d** %%{hour(hours)} **%(min)02d** %%{minute(min)} **%(sec)02d** %%{second(sec)} old.",\n        dict(hours=total[\'oldest\'][0], min=total[\'oldest\'][1], sec=total[\'oldest\'][2])))\n        response.write(\'\\r\\n    </p>\\r\\n    \', escape=False)\n        response.write(BUTTON(T(\'Cache Keys\'), _onclick=\'jQuery("#all_keys").toggle();\'))\n        response.write(\'\\r\\n    <div class="hidden" id="all_keys">\\r\\n      \', escape=False)\n        response.write(total[\'keys\'])\n        response.write(\'\\r\\n    </div>\\r\\n    <br />\\r\\n    \', escape=False)\n        pass\n    response.write(\'\\r\\n\\r\\n    <h4>\', escape=False)\n    response.write(T("RAM"))\n    response.write(\'</h4>\\r\\n    <p>\', escape=False)\n    response.write(T.M("Number of entries: **%s**", ram[\'entries\']))\n    response.write(\'</p>\\r\\n    \', escape=False)\n    if ram[\'entries\'] > 0:\n        response.write(\'\\r\\n    <p>\', escape=False)\n        response.write(T.M("Hit Ratio: **%(ratio)s%%** (**%(hits)s** %%{hit(hits)} and **%(misses)s** %%{miss(misses)})",\n        dict( ratio=ram[\'ratio\'], hits=ram[\'hits\'], misses=ram[\'misses\'])))\n        response.write(\'\\r\\n    </p>\\r\\n    <p>\\r\\n      \', escape=False)\n        response.write(T("Size of cache:"))\n        response.write(\'\\r\\n      \', escape=False)\n        if object_stats:\n            response.write(\'\\r\\n        \', escape=False)\n            response.write(T.M("**%(items)s** items, **%(bytes)s** %%{byte(bytes)}", dict(items=ram[\'objects\'], bytes=ram[\'bytes\'])))\n            response.write(\'\\r\\n        \', escape=False)\n            if ram[\'bytes\'] > 524287:\n                response.write(\'\\r\\n          \', escape=False)\n                response.write(T.M("(**%.0d MB**)", ram[\'bytes\'] / 10485576))\n                response.write(\'\\r\\n        \', escape=False)\n                pass\n            response.write(\'\\r\\n      \', escape=False)\n        else:\n            response.write(\'\\r\\n        \', escape=False)\n            response.write(T.M("``**not available**``:red (requires the Python [[guppy http://pypi.python.org/pypi/guppy/ popup]] library)"))\n            response.write(\'\\r\\n      \', escape=False)\n            pass\n        response.write(\'\\r\\n    </p>\\r\\n    <p>\\r\\n      \', escape=False)\n        response.write(T.M("RAM contains items up to **%(hours)02d** %%{hour(hours)} **%(min)02d** %%{minute(min)} **%(sec)02d** %%{second(sec)} old.",\n        dict(hours=ram[\'oldest\'][0], min=ram[\'oldest\'][1], sec=ram[\'oldest\'][2])))\n        response.write(\'\\r\\n    </p>\\r\\n    \', escape=False)\n        response.write(BUTTON(T(\'RAM Cache Keys\'), _onclick=\'jQuery("#ram_keys").toggle();\'))\n        response.write(\'\\r\\n    <div class="hidden" id="ram_keys">\\r\\n      \', escape=False)\n        response.write(ram[\'keys\'])\n        response.write(\'\\r\\n    </div>\\r\\n    <br />\\r\\n    \', escape=False)\n        pass\n    response.write(\'\\r\\n\\r\\n    <h4>\', escape=False)\n    response.write(T("DISK"))\n    response.write(\'</h4>\\r\\n    <p>\', escape=False)\n    response.write(T.M("Number of entries: **%s**", disk[\'entries\']))\n    response.write(\'</p>\\r\\n    \', escape=False)\n    if disk[\'entries\'] > 0:\n        response.write(\'\\r\\n      <p>\\r\\n      \', escape=False)\n        response.write(T.M("Hit Ratio: **%(ratio)s%%** (**%(hits)s** %%{hit(hits)} and **%(misses)s** %%{miss(misses)})",\n        dict(ratio=disk[\'ratio\'], hits=disk[\'hits\'], misses=disk[\'misses\'])))\n        response.write(\'\\r\\n      </p>\\r\\n      <p>\\r\\n      \', escape=False)\n        response.write(T("Size of cache:"))\n        response.write(\'\\r\\n      \', escape=False)\n        if object_stats:\n            response.write(\'\\r\\n        \', escape=False)\n            response.write(T.M("**%(items)s** %%{item(items)}, **%(bytes)s** %%{byte(bytes)}", dict( items=disk[\'objects\'], bytes=disk[\'bytes\'])))\n            response.write(\'\\r\\n        \', escape=False)\n            if disk[\'bytes\'] > 524287:\n                response.write(\'\\r\\n          \', escape=False)\n                response.write(T.M("(**%.0d MB**)", disk[\'bytes\'] / 1048576))\n                response.write(\'\\r\\n        \', escape=False)\n                pass\n            response.write(\'\\r\\n      \', escape=False)\n        else:\n            response.write(\'\\r\\n        \', escape=False)\n            response.write(T.M("``**not available**``:red (requires the Python [[guppy http://pypi.python.org/pypi/guppy/ popup]] library)"))\n            response.write(\'\\r\\n      \', escape=False)\n            pass\n        response.write(\'\\r\\n      </p>\\r\\n      <p>\\r\\n      \', escape=False)\n        response.write(T.M("DISK contains items up to **%(hours)02d** %%{hour(hours)} **%(min)02d** %%{minute(min)} **%(sec)02d** %%{second(sec)} old.",\n        dict(hours=disk[\'oldest\'][0], min=disk[\'oldest\'][1], sec=disk[\'oldest\'][2])))\n        response.write(\'\\r\\n      </p>\\r\\n      \', escape=False)\n        response.write(BUTTON(T(\'Disk Cache Keys\'), _onclick=\'jQuery("#disk_keys").toggle();\'))\n        response.write(\'\\r\\n      <div class="hidden" id="disk_keys">\\r\\n      \', escape=False)\n        response.write(disk[\'keys\'])\n        response.write(\'\\r\\n      </div>\\r\\n      <br />\\r\\n    \', escape=False)\n        pass\n    response.write(\'\\r\\n  </div>\\r\\n\\r\\n  <div class="list-header">\\r\\n    <h3>\', escape=False)\n    response.write(T("Manage Cache"))\n    response.write(\'</h3>\\r\\n  </div>\\r\\n\\r\\n  <div class="content">\\r\\n    <p>\\r\\n      \', escape=False)\n    response.write(form)\n    response.write(\'\\r\\n    </p>\\r\\n  </div>\\r\\n</div>\\r\\n<div class="clear"></div>\\r\\n\', escape=False)\n    pass\nresponse.write(\'\\r\\n\\r\\n\', escape=False)\nif request.function==\'graph_model\':\n    response.write(\'\\r\\n<h2>\', escape=False)\n    response.write(T("Graph Model"))\n    response.write(\'</h2>\\r\\n  \', escape=False)\n    if not pgv:\n        response.write(\'\\r\\n    \', escape=False)\n        response.write(T(\'pygraphviz library not found\'))\n        response.write(\'\\r\\n  \', escape=False)\n    elif not databases:\n        response.write(\'\\r\\n    \', escape=False)\n        response.write(T("No databases in this application"))\n        response.write(\'\\r\\n  \', escape=False)\n    else:\n        response.write(\'\\t   \\r\\n    <div class="btn-group">\\r\\n      <a class="btn dropdown-toggle" data-toggle="dropdown" href="#">\\r\\n        <i class="icon-download"></i> \', escape=False)\n        response.write(T(\'Save model as...\'))\n        response.write(\'\\r\\n        <span class="caret"></span>\\r\\n      </a>\\r\\n      <ul class="dropdown-menu">\\r\\n          <li><a href="\', escape=False)\n        response.write(URL(\'appadmin\', \'bg_graph_model\', args=[\'png\']))\n        response.write(\'">png</a></li>\\r\\n          <li><a href="\', escape=False)\n        response.write(URL(\'appadmin\', \'bg_graph_model\', args=[\'svg\']))\n        response.write(\'">svg</a></li>\\r\\n          <li><a href="\', escape=False)\n        response.write(URL(\'appadmin\', \'bg_graph_model\', args=[\'pdf\']))\n        response.write(\'">pdf</a></li>\\r\\n          <li><a href="\', escape=False)\n        response.write(URL(\'appadmin\', \'bg_graph_model\', args=[\'ps\']))\n        response.write(\'">ps</a></li>          \\r\\n          <li><a href="\', escape=False)\n        response.write(URL(\'appadmin\', \'bg_graph_model\', args=[\'dot\']))\n        response.write(\'">dot</a></li>                                   \\r\\n      </ul>\\r\\n    </div>\\r\\n    <br />\\r\\n    \', escape=False)\n        response.write(IMG(_src=URL(\'appadmin\', \'bg_graph_model\')))\n        response.write(\'\\r\\n  \', escape=False)\n        pass\n    response.write(\'\\r\\n\', escape=False)\n    pass\nresponse.write(\'\\r\\n\\r\\n\', escape=False)\nif request.function == \'manage\':\n    response.write(\'\\r\\n<h2>\', escape=False)\n    response.write(heading)\n    response.write(\'</h2>\\r\\n<ul class="nav nav-tabs">\\r\\n  \', escape=False)\n    for k, tablename in enumerate(tablenames):\n        response.write(\'\\r\\n  <li\', escape=False)\n        response.write(XML(\' class="active"\') if k == 0 else \'\')\n        response.write(\'>\\r\\n    <a href="#table-\', escape=False)\n        response.write(tablename)\n        response.write(\'" data-toggle="tab">\', escape=False)\n        response.write(labels[k])\n        response.write(\'</a>\\r\\n  </li>\\r\\n  \', escape=False)\n        pass\n    response.write(\'\\r\\n</ul>\\r\\n\\r\\n<div class="tab-content">\\r\\n  \', escape=False)\n    for k, tablename in enumerate(tablenames):\n        response.write(\'\\r\\n  <div class="tab-pane\', escape=False)\n        response.write(XML(\' active\') if k == 0 else \'\')\n        response.write(\'" id="table-\', escape=False)\n        response.write(tablename)\n        response.write(\'">\\r\\n    \', escape=False)\n        response.write(LOAD(f=\'manage.load\', args=[request.args(0), k], ajax=True))\n        response.write(\'\\r\\n  </div>\\r\\n  \', escape=False)\n        pass\n    response.write(\'\\r\\n</div>\\r\\n\', escape=False)\n    pass\nresponse.write(\'\\r\\n\', escape=False)\nresponse.write(\'\\r\\n            \', escape=False)\nresponse.write(\'\\r\\n        </div>\\r\\n\\r\\n        \', escape=False)\nif right_sidebar_enabled:\n    response.write(\'\\r\\n        <div class="span3">\\r\\n            \', escape=False)\n    response.write(\'\\r\\n            <h3>Right Sidebar</h3>\\r\\n            <p></p>\\r\\n            \', escape=False)\n    response.write(\'\\r\\n        </div>\\r\\n        \', escape=False)\n    pass\nresponse.write(\'\\r\\n    </section><!--/main-->\\r\\n\\r\\n    <!-- Footer ================================================== -->\\r\\n    <div class="row">\\r\\n        <footer class="footer span12" id="footer">\\r\\n            <div class="footer-content">\\r\\n                \', escape=False)\nresponse.write(\' <!-- this is default footer -->\\r\\n                <div class="copyright pull-left">\', escape=False)\nresponse.write(T(\'Copyright\'))\nresponse.write(\' &#169; \', escape=False)\nresponse.write(request.now.year)\nresponse.write(\'</div>\\r\\n                <div id="poweredBy" class="pull-right">\\r\\n                    \', escape=False)\nresponse.write(T(\'Powered by\'))\nresponse.write(\'\\r\\n                    <a href="http://www.web2py.com/">web2py</a>\\r\\n                </div>\\r\\n                \', escape=False)\nresponse.write(\'\\r\\n            </div>\\r\\n        </footer>\\r\\n    </div>\\r\\n\\r\\n  </div> <!-- /container -->\\r\\n\\r\\n  <!-- The javascript =============================================\\r\\n       (Placed at the end of the document so the pages load faster) -->\\r\\n  <script src="\', escape=False)\nresponse.write(URL(\'static\',\'js/bootstrap.min.js\'))\nresponse.write(\'"></script>\\r\\n  <script src="\', escape=False)\nresponse.write(URL(\'static\',\'js/web2py_bootstrap.js\'))\nresponse.write(\'"></script>\\r\\n  <!--[if lt IE 7 ]>\\r\\n      <script src="\', escape=False)\nresponse.write(URL(\'static\',\'js/dd_belatedpng.js\'))\nresponse.write(\'"></script>\\r\\n      <script> DD_belatedPNG.fix(\\\'img, .png_bg\\\'); //fix any <img> or .png_bg background-images </script>\\r\\n      <![endif]-->\\r\\n  \\r\\n  \', escape=False)\nif response.google_analytics_id:\n    response.write(\'\\r\\n  <script src="\', escape=False)\n    response.write(URL(\'static\',\'js/analytics.min.js\'))\n    response.write(\'"></script>\\r\\n  <script type="text/javascript">\\r\\n  analytics.initialize({\\r\\n    \\\'Google Analytics\\\':{trackingId:\\\'\', escape=False)\n    response.write(response.google_analytics_id)\n    response.write("\'} \\r\\n  });</script>\\r\\n  ", escape=False)\n    pass\nresponse.write(\'\\r\\n  <script src="\', escape=False)\nresponse.write(URL(\'static\',\'js/share.js\',vars=dict(static=URL(\'static\',\'images\'))))\nresponse.write(\'"></script>\\r\\n</body>\\r\\n</html>\\r\\n\\r\\n\', escape=False)'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/mdipierro/make_web2py/web2py/gluon/restricted.py", line 220, in restricted\n  File "C:\\Users\\Leandro\\Documents\\CJR\\DIPRO\\PROJETOS\\G\xeanios\\genios\\ProjetoGenios\\web2py\\applications\\Genios\\views\\appadmin.html", line 107, in <module>\n  File "/home/mdipierro/make_web2py/web2py/gluon/dal.py", line 8322, in __getitem__\n  File "/home/mdipierro/make_web2py/web2py/gluon/dal.py", line 8328, in __getattr__\n  File "/home/mdipierro/make_web2py/web2py/gluon/dal.py", line 8260, in lazy_define_table\n  File "/home/mdipierro/make_web2py/web2py/gluon/dal.py", line 1104, in create_table\n  File "/home/mdipierro/make_web2py/web2py/gluon/dal.py", line 1950, in create_sequence_and_triggers\n  File "/home/mdipierro/make_web2py/web2py/gluon/dal.py", line 1969, in execute\n  File "/home/mdipierro/make_web2py/web2py/gluon/dal.py", line 1963, in log_execute\n  File "/home/mdipierro/make_web2py/web2py/gluon/contrib/pymysql/cursors.py", line 117, in execute\n  File "/home/mdipierro/make_web2py/web2py/gluon/contrib/pymysql/connections.py", line 202, in defaulterrorhandler\nInternalError: (1050, u"Table \'tb_perfil\' already exists")\n'
p11
s.